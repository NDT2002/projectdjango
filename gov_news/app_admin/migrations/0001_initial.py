# Generated by Django 4.2.4 on 2023-09-13 22:05

import app_admin.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_nicename', models.CharField(db_index=True, max_length=50)),
                ('user_url', models.URLField(max_length=100)),
                ('user_registered', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('display_name', models.CharField(max_length=250)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to=app_admin.models.upload_to)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_post_id', models.BigIntegerField(db_index=True)),
                ('comment_author', models.TextField()),
                ('comment_author_email', models.CharField(db_index=True, max_length=100)),
                ('comment_author_url', models.CharField(max_length=200)),
                ('comment_author_IP', models.CharField(max_length=100)),
                ('comment_date', models.DateTimeField()),
                ('comment_date_gmt', models.DateTimeField(db_index=True)),
                ('comment_content', models.TextField()),
                ('comment_approved', models.CharField(db_index=True, max_length=20)),
                ('comment_agent', models.CharField(max_length=255)),
                ('comment_type', models.CharField(max_length=20)),
                ('comment_parent', models.BigIntegerField(db_index=True)),
                ('user_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'comments',
            },
        ),
        migrations.CreateModel(
            name='Option',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option_name', models.CharField(max_length=64, unique=True)),
                ('option_value', models.TextField()),
                ('autoload', models.CharField(db_index=True, default='yes', max_length=20)),
            ],
            options={
                'db_table': 'options',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_date', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('post_content', models.TextField()),
                ('post_image', models.ImageField(blank=True, null=True, upload_to=app_admin.models.upload_to)),
                ('post_title', models.TextField()),
                ('post_excerpt', models.TextField()),
                ('post_status', models.CharField(db_index=True, default='publish', max_length=20)),
                ('comment_status', models.CharField(default='open', max_length=20)),
                ('post_password', models.CharField(blank=True, max_length=20, null=True)),
                ('post_name', models.CharField(db_index=True, max_length=200)),
                ('post_modified', models.DateTimeField(auto_now=True)),
                ('guid', models.CharField(blank=True, max_length=255, null=True)),
                ('menu_order', models.IntegerField(default=0)),
                ('post_type', models.CharField(db_index=True, default='post', max_length=20)),
                ('post_mime_type', models.CharField(blank=True, max_length=100, null=True)),
                ('comment_count', models.BigIntegerField(default=0)),
                ('post_author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('post_parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app_admin.post')),
            ],
            options={
                'db_table': 'posts',
            },
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200)),
                ('slug', models.CharField(db_index=True, max_length=200)),
                ('term_group', models.BigIntegerField(default=0)),
            ],
            options={
                'db_table': 'terms',
            },
        ),
        migrations.CreateModel(
            name='UserMeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meta_key', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('meta_value', models.TextField(blank=True, null=True)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'usermeta',
            },
        ),
        migrations.CreateModel(
            name='TermTaxonomy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taxonomy', models.CharField(db_index=True, max_length=32, unique=True)),
                ('description', models.TextField()),
                ('parent', models.BigIntegerField(default=0)),
                ('term_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_admin.term')),
            ],
            options={
                'db_table': 'term_taxonomy',
            },
        ),
        migrations.CreateModel(
            name='TermRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.BigIntegerField(db_index=True)),
                ('term_order', models.IntegerField(default=0)),
                ('term_taxonomy_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_admin.termtaxonomy')),
            ],
            options={
                'db_table': 'term_relationships',
            },
        ),
        migrations.CreateModel(
            name='TermMeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meta_key', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('meta_value', models.TextField(blank=True, null=True)),
                ('term_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_admin.term')),
            ],
            options={
                'db_table': 'termmeta',
            },
        ),
        migrations.CreateModel(
            name='PostMeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meta_key', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('meta_value', models.TextField(blank=True, null=True)),
                ('post_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_admin.post')),
            ],
            options={
                'db_table': 'postmeta',
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link_url', models.CharField(max_length=255)),
                ('link_name', models.CharField(max_length=255)),
                ('link_image', models.CharField(max_length=255)),
                ('link_target', models.CharField(max_length=25)),
                ('link_description', models.CharField(max_length=255)),
                ('link_visible', models.CharField(db_index=True, default='Y', max_length=20)),
                ('link_rating', models.IntegerField(default=0)),
                ('link_updated', models.DateTimeField()),
                ('link_rel', models.CharField(max_length=255)),
                ('link_notes', models.TextField()),
                ('link_rss', models.CharField(max_length=255)),
                ('link_owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'links',
            },
        ),
        migrations.CreateModel(
            name='CommentMeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meta_key', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('meta_value', models.TextField(blank=True, null=True)),
                ('comment_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_admin.comment')),
            ],
            options={
                'db_table': 'commentmeta',
            },
        ),
    ]
